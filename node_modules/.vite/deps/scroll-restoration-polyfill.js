import "./chunk-JVWSFFO4.js";

// node_modules/one-event/dist/one-event.es-modules.js
function once(target, type, listener, useCapture) {
  target.addEventListener(type, listener, useCapture);
  target.addEventListener(type, function selfRemoving() {
    target.removeEventListener(type, listener, useCapture);
    target.removeEventListener(type, selfRemoving, useCapture);
  }, useCapture);
}
once.promise = function(target, type, useCapture) {
  return new Promise(function(resolve) {
    return once(target, type, resolve, useCapture);
  });
};
var one_event_es_modules_default = once;

// node_modules/get-scroll/dist/get-scroll.es-modules.js
function getScrollTop() {
  return window.pageYOffset || document.body.scrollTop;
}
function getScrollLeft() {
  return window.pageXOffset || document.body.scrollLeft;
}

// node_modules/scroll-restoration-polyfill/dist/scroll-restoration-polyfill.es-modules.js
var state = "auto";
function waitForScroll() {
  one_event_es_modules_default(window, "scroll", scrollTo.bind(window, getScrollLeft(), getScrollTop()));
}
if (!("scrollRestoration" in history)) {
  Object.defineProperty(history, "scrollRestoration", {
    enumerable: true,
    get: function() {
      return state;
    },
    set: function(requestedState) {
      if (requestedState === state) {
        return;
      }
      if (requestedState === "auto") {
        window.removeEventListener("popstate", waitForScroll);
        state = requestedState;
      } else if (requestedState === "manual") {
        window.addEventListener("popstate", waitForScroll);
        state = requestedState;
      }
    }
  });
}
/*! Bundled license information:

one-event/dist/one-event.es-modules.js:
  (*! npm.im/one-event *)

scroll-restoration-polyfill/dist/scroll-restoration-polyfill.es-modules.js:
  (*! npm.im/scroll-restoration-polyfill *)
*/
//# sourceMappingURL=scroll-restoration-polyfill.js.map
